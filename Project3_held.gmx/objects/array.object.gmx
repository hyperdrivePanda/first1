<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tileWidth=32;
tileHeight=16;

testArray[0, 0] = 0;
playerInfo[0] = "greenSquare";
playerInfo[1] = "blocky";
playerInfo[2] = "unanimated";
//q=0;
pixelDiff = 16.00;
pixelShift[0] = 48;
pixelShift[1] = pixelShift[0]-16;
pixelShift[2] = pixelShift[1]-14;
pixelShift[3] = pixelShift[2]-12;

for (i=0; i&lt;=2; i++)
{
    shiftGuide[i] = pixelShift[i] - (pixelShift[i] - pixelShift[i+1])/2;
}

//global.c1 = path_add();
//instance_create(x+tileWidth/2, y+48, player);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*for (i = 0; i &lt;= 2; i++)
{
    draw_text(x, y+(16*i), string(playerInfo[i]));
}*/

count = 0;
for (c=0; c &lt;=3; c++)
{
    for (r=0; r&lt;=3; r++)
    {   
        //grid borders
        testArray[c, r] = count;
        count++;
        draw_line(x+(32*c), y+(16*3), x+(32*2)-16, y-(16*3));
        draw_line(x, y+(pixelShift[r]), x+(32*c), y+(pixelShift[r]));   
        
        //cell count
        draw_text(x+(32*c), y+(pixelShift[r]), count);
        
        //grid skeleton
        for (g=0; g&lt;=2; g++)
        { 
          if (c&lt;3){
          draw_set_colour(c_red);
          draw_line(x+(32*c)+16,y+(16*3), x+(32*2)-16, y-(16*3)); 
          }
          draw_set_colour(c_yellow);
          draw_line(x, y+(shiftGuide[g]), x+(32*c), y+(shiftGuide[g]));
          draw_set_colour(c_black);
          
          
        }
        
           
    }
}
/*draw_sprite(spr_point,0, x+16, y+48);
path_add_point(c1, x+16, y-(16*32), 0);
draw_sprite(spr_point, 0, x+(32*2)-16, y-(16*3));
path_add_point(c1, x+(32*2)-16, y-(16*3), 0); */






</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
