<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDrone</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>horiz = 2;
fwd = 0;
stopping = false;
col[0] = path0;
col[1] = path1;
col[2] = path2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fwdMax = 3;
horizMax = 3;
fwdNext = fwd+1;
fwdPrev = fwd-1;

if (keyboard_check(ord('W')) = true and fwdNext &lt;= fwdMax)
{
 path_start(path2, 7, path_action_continue, 0);
 
 if (y &lt;= path_get_point_y(path2, fwdNext))
  fwd++;
 
 if (y &lt;= path_get_point_y(path2, fwdMax))
 {
  x = path_get_point_x(path2, fwdMax);
  y = path_get_point_y(path2, fwdMax);
  path_end();
 } 
}
//release
if (keyboard_check_released(ord('W')) and fwdNext &lt;= fwdMax)
{
 stopping = true;
}

 if (stopping == true and y &lt;= path_get_point_y(path2, fwdNext))
 {
  path_end();
  stopping = false;
  x = path_get_point_x(path2, fwdNext);
  y = path_get_point_y(path2, fwdNext);    
 }
/********************************************************
if (keyboard_check(ord('S')) = true and fwdPrev &gt;= 0)
{
 path_reverse(0)
 
 if (y &gt;= path_get_point_y(path2, fwdPrev))
  fwd--;
 
 if (y &gt;= path_get_point_y(path2, 0))
 {
  x = path_get_point_x(path2, 0);
  y = path_get_point_y(path2, 0);
  path_end();
 } 
}
//release
if (keyboard_check_released(ord('S')) and fwdPrev &gt;= 0)
{
 stopping = true;
}

 if (stopping == true and y &gt;= path_get_point_y(path2, fwdPrev))
 {
  path_end();
  stopping = false;
  x = path_get_point_x(path2, fwdPrev);
  y = path_get_point_y(path2, fwdPrev);    
 }
 *****************************************/

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
