<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>baseTile</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>row[0] = path0;
row[1] = path1;
row[2] = path2;
horizMax = 4;
fwdMax = 2;

instance_create(0, 0, objFrame);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_tester</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>target = obj_strawPiece;
//horizontal paths starting from the bottom left
    x = path_get_point_x(floorTiles.row[fwd], horiz);
    y = path_get_point_y(floorTiles.row[fwd], horiz);
//'horiz' determines the column starting from 0
    
if (wheelAnti.timer &gt;= 40)
{ 
 if (keyboard_check_pressed(ord('W')) = true and floorTiles.fwdMax &gt; fwd)
 {  
    fwd++;
    x = path_get_point_x(floorTiles.row[fwd], horiz);
    y = path_get_point_y(floorTiles.row[fwd], horiz);
    image_xscale -= 0.15;
    image_yscale  -= 0.15;
    depth++;
    wheelAnti.timer -= 40;
 }
 
  if (keyboard_check_pressed(ord('S')) = true and fwd &gt; 0)
 {
    fwd--;
    x = path_get_point_x(floorTiles.row[fwd], horiz);
    y = path_get_point_y(floorTiles.row[fwd], horiz);
    image_xscale += 0.15;
    image_yscale  += 0.15;
    depth--;
    wheelAnti.timer -= 40;
 }
 
   if (keyboard_check_pressed(ord('A')) = true and horiz &gt; 0)
 {
    horiz--;
    x = path_get_point_x(floorTiles.row[fwd], horiz);
    y = path_get_point_y(floorTiles.row[fwd], horiz);
    wheelAnti.timer -= 40;
 }
 
   if (keyboard_check_pressed(ord('D')) = true and horiz &lt; floorTiles.horizMax)
 {
    horiz++;
    x = path_get_point_x(floorTiles.row[fwd], horiz);
    y = path_get_point_y(floorTiles.row[fwd], horiz);
    wheelAnti.timer -= 40;
 }
 
 fwdDiff = fwd - target.fwd;
 horizDiff = horiz - target.horiz;

 /********Turning to face target**********************/ 
 if (fwdDiff &lt; 0)
  fwdDiff *= (0-1);
 
 if (horizDiff &lt; 0)
  horizDiff *= (0-1);

 
 if (fwdDiff &gt; horizDiff)
 {
  if (fwd &gt; target.fwd)
   sprite_index = antiBack;
   
  if (fwd &lt; target.fwd)
   sprite_index = antiFwd;
 }
 
 if (horizDiff &gt; fwdDiff)
  {
   if (horiz &gt; target.horiz)
    sprite_index = antiLeft;
    
   if (horiz &lt; target.horiz)
    sprite_index = antiRight;
  }
 /*********************************/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
